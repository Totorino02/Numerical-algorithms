"""if cpt != self.len - 1:
                    temporalTab = [x for x in self.matrix[i]]
                    self.matrix[i] = [x for x in self.matrix[cpt + 1]]
                    self.matrix[cpt + 1] = [x for x in temporalTab]
                    cpt += 1
                elif cpt == self.len-1:
                    temporalTab = [x for x in self.matrix[i]]
                    self.matrix[i] = [x for x in self.matrix[0]]
                    self.matrix[0] = [x for x in temporalTab]
                    cpt += 1"""
"""for i in range(self.len):
            self.matrix[i].append(self.vect[i])
        # if a value in a diagonal is null, inverse the line with another line
        for i in range(self.len):
            while self.matrix[i][i] == 0 :
                # inversion if the begin of the pivot is null: L_i <-> L_maxVal
                tempCtab = self.matrix[i][i]
                maxValIndex = i
                for cpt in range(i,self.len):
                    if abs(self.matrix[cpt][i]) > tempCtab:
                        maxValIndex = cpt
                temporalTab = [x for x in self.matrix[i]]
                self.matrix[i] = [x for x in self.matrix[maxValIndex]]
                self.matrix[maxValIndex] = [x for x in temporalTab]"""

        """for i in range(self.len):
            self.vect[i] = self.matrix[i][self.len]
            self.matrix[i].pop(self.len)"""



        except TypeError:
            print("Type Error :=> incorrect input")
        except RuntimeError:
            print("Runtime Error :=> Run time error please try aigain")
        except ValueError:
            print("Value Error :=> you enter innapropriate value")
        except IndexError:
            print("Index Error :=> not square matrix !")